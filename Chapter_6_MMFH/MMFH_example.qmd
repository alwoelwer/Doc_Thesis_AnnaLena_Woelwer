---
title: "Chapter 6: Multivariate Fay-Herriot model with missing dependent variables (MMFH)"
author: "Anna-Lena Wölwer"
format: html
editor: visual
---

## Description

The theoretical basis of the *Multivariate Fay-Herriot model with missing dependent variables (MMFH)* and the presented code is given in Chapter 6 of the dissertation *Model-Based Prediction and Estimation Using Incomplete Survey Data* by *Anna-Lena Wölwer*, which is available [here](https://doi.org/10.25353/ubtr-xxxx-25a6-5f2c).

This folder contains files `MMFH_gen_dat_m3.R` and `MMFH_fitting.R`, both of which contain executable functions which are illustrated in the following.

-   `MMFH_gen_dat_m3.R` contains functions for generating data according to an MMFH model
-   `MMFH_fitting.R` contains a function for fitting a MMFH model (parameter estimation, predictions, MSE estimates)

## Libraries

For the examples, we use the following libraries.

```{r}
library(Matrix)
library(mvtnorm)
library(reshape2)
library(ggplot2)
library(sae)
```

## Overview of the R codes in this folder

### MMFH_gen_dat_m3.R

```{r}
source(paste0(getwd(), "/MMFH_gen_dat_m3.R"))
```

The file comes with two functions `f_prep_MMFH_m3`& `f_gen_MMFH_m3` for generating data according to a MMFH model with $m=3$ dependent variables (therefore the *\_m3* in the name). The code contains comments on the inputs of the functions.

Function `f_prep_MMFH_m3` is used to generate all quantities which are typically considered to be fixed in model-based small area simulation studies, e.g. the matrix of auxiliary information. For a model-based simulation study, we would execute this function only once. The function takes as input all parameters of a multivariate Fay-Herriot model like the fixed effects, the variance components, and the number of domains.

Function `f_gen_MMFH_m3` is used to generate all quantities which are typically considered random in model-based small area simulation studies like the random effects and sampling errors. For a simulation study, we would execute this function in each Monte Carlo iteration. The function takes as input all inputs and outputs of function `f_prep_MMFH_m3`.

### MMFH_fitting.R

```{r}
source(paste0(getwd(), "/MMFH_fitting.R"))
```

The file contains function `f_MMFH`. The code contains comments on the inputs of the function.

Function `f_MMFH` is used to fit a MMFH model to input data. This includes the estimation of the model fixed effects ($\beta$) and variance components ($\theta$) via Fisher-Scoring, either based on maximum likelihood (ML) or restricted maximum likelihood (REML). Furthermore, based on the parameter estimates, the model returns estimates of the random effects, the synthetic predictions ($X \beta$) and the Empirical Best Predictions (EBPs). In addition, the MSE estimates are given.

Although in this example we only cover the case of $m=3$ dependent variables, function `f_MMFH` works for an arbitrary number of $m\geq 2$ dependent variables.

## Generate example data

Generate the fixed quantities of a MMFH model including randomly generated auxiliary information (documentation of required inputs is given in `MMFH_gen_dat_m3.R`).

Set input quantities

```{r}
m = 3 # total number of variables of interest, number of dependent variables
D = 100 # total number of domains
v_ref = c(2,3,4) # variances of random effects of the 3 variables
cor_ref = c(.2,.3,.4) # correlations of random effects
v_rer = c(2.5,3.5,4.5) # variances of sampling errors of the 3 variables
cor_rer = c(.15,.25,.35) # correlations of sampling errors
beta = list(c(1.5, 2.5), # list, for each variable: vector of fixed effects
            c(2.3,3.3,4.3),
            c(4.1,3.1,2.1, 2.2))
range_aux = c(10, 100) # range of the uniform distribution from which auxiliary information is sampled from
perc_mis = c(5, 5, 2) # percentage of missing domain information per variable
```

Generate data

```{r}
d_fix <- f_prep_MMFH_m3(seed = 56)
names(d_fix)
```

Use `f_gen_MMFH_m3` to generate the model information which typically varies between Monte Carlo iterations. That is, the generation of the dependent variables. The function allows to set certain values as missing, input `perc_mis` determines the number of domains for which the survey information of the three dependent variables is missing. Note that in this code the missing dependent variables are non-overlapping. That is, there is maximum one missing dependent variable per domain. This, however, can easily be changed in the code.

```{r}
d_var <- f_gen_MMFH_m3( x = d_fix$x,
                        beta = d_fix$beta,
                        V_ud = d_fix$V_ud,
                        V_ed = d_fix$V_ed,
                        seed = 67,
                        verbose = TRUE )
str(d_var)
```

`y_true` are the (according to the model) true values of the dependent variables, `y_obs` are the survey estimates of the dependent variables, `y_mis` are the survey estimates, which we consider to be available, some of which are missing (determined by `perc_mis` in `f_gen_MMFH_m3`). The missing mechanism is *missing completely at random* (MCAR).

Have a look at the generated dependent variables.

```{r}
d_plot <- reshape2::melt(d_var$y_mis)
d_plot$Var2 <- factor(d_plot$Var2)
colnames(d_plot) <- c("domain", "variable", "value")
```

```{r}
ggplot2::ggplot(d_plot,
                aes(x = domain, y = value, group = variable, 
                    color = variable, fill = variable, 
                    shape = variable, lty = variable)) + 
  geom_line() +
  geom_point()
```

```{r}
ggplot2::ggplot(d_plot,
                aes(x = variable, y = value,
                    fill = variable)) + 
  geom_boxplot(alpha = .6) +
  geom_jitter(pch = 21, alpha = .6)
```

From the error message, you can see that there are (as we wanted) missing values in the dependent variables. Furthermore, you can play around with the parameters of the data generation and see how the outcomes of the sampling estimates change.

The number of domains with missing values of variables 1, 2, and 3 is

```{r}
colSums(is.na(d_var$y_mis))
```

## Function f_MMFH

Set some of the function inputs.

```{r}
method <- "REML" # REML or ML in Fisher-Scoring
# method <- "ML"
verbose <- TRUE # print intermediate outputs
eps <- 1e-8 # convergence tolerance
maxiter <- 100 # maximum number of iterations of Fisher-Socring
```

Fit a MMFH model to survey estimates `d_var$y_mis` (documentation of required input in `MMFH_fitting.R`).

```{r}
res_MMFH <- f_MMFH(y           = d_var$y_mis,
                   x           = d_fix$x,
                   V_ed        = d_fix$V_ed,
                   theta       = NULL, 
                   theta_start = NULL, 
                   method      = method, 
                   eps         = eps, 
                   maxiter     = maxiter, 
                   verbose     = TRUE)
```

With `verbose = TRUE`, the model returns the intermediate parameter estimates.

See the model output.

```{r}
str(res_MMFH)
```

The function returns the parameters estimates, EBPs, predictions of random effects, synthetic predictions, and MSE estimates.

## Compare MMFH fitting algorithm to sae::eblupFH (for univariate FH models)

We make an example to compare the MMFH output to the output of a (univariate) Fay-Herriot model using function `sae::mseFH`.

```{r}
# Calculate (univariate) Fay-Herriot models with function mseFH from the sae package
res_FH <- list()
for (k in 1:m) {
  a_tmp <- which(!is.na(d_var$y_mis[,k]))
  res_FH[[k]] <- sae::mseFH(d_var$y_mis[,k][a_tmp] ~ -1 + d_fix$x[[k]][a_tmp,],
                            vardir = sapply(d_fix$V_ed[a_tmp], function (d){ d[k,k] }),
                            method = method,
                            PRECISION = eps,
                            MAXITER = maxiter)
}
```

For illustration, we choose variable 1.

```{r}
# For variable 1: Get FH results
k = 1
a_tmp <- which(!is.na(d_var$y_mis[,k]))
eblup_tmp <- rep(NA, D)
mse_tmp <- rep(NA, D)
eblup_tmp[which(!is.na(d_var$y_mis[,k]))] <- as.vector(res_FH[[k]]$est$eblup) 
mse_tmp[which(!is.na(d_var$y_mis[,k]))] <- as.vector(res_FH[[k]]$mse) 
```

Compare the EBPs:

```{r}
dat_comb <- cbind("true" = d_var$y_true[,k],
                  "FH_EBLUP" = eblup_tmp,
                  "FH_SYN" = as.vector(d_fix$x[[k]] %*% res_FH[[k]]$est$fit$estcoef[,1]),
                  "MMFH" = res_MMFH$est$ebp[,k])
dat_comb[1:10,]
```

Exemplary for the first 10 domains, you can see the true values of the dependent variables in the first column. Furthermore, column 2 shows the FH EBLUPs (*FH_EBLUP*). For domains 1 to 5, the survey estimates were considered missing. Therefore, the FH model cannot be used to calculated EBLUPs and only return synthetic predictions *FH_SYN*. In addition, column 4 gives the EBPs of the MMFH model. With the MMFH model, we can calculate EBPs also for the domains with missing values of variable 1 as the model uses the correlations of the variable to variables 2 and 3 in a multivariate model.

Compare the MSE estimates:

```{r}
cbind("FH" = mse_tmp,
      "MMFH" = res_MMFH$mse[,"v1"])[1:10,]
```

Also for the MSE, only the MMFH model can give estimates for domains 1 to 5, for which the survey direct estimates are considered missing.
